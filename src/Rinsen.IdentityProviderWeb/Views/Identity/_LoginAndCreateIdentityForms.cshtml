@model Rinsen.IdentityProviderWeb.Models.IdentityModel
@using Microsoft.AspNetCore.Mvc.ModelBinding;
<div class="row">
    <div class="col-md-6">
        <h1>Login</h1>
        <hr />
        <div class="row">
            <div class="col-md-12">
                @using (Html.BeginForm("Login", "Identity"))
                {
                    <div class="form-horizontal @(Model.LoginModel.InvalidEmailOrPassword ? "has-error" : "")">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            @Html.LabelFor(m => m.LoginModel.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(m => m.LoginModel.Email, new { @type = "email", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LoginModel.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(m => m.LoginModel.Password, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(m => m.LoginModel.Password, new { @type = "password", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LoginModel.Password, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @if (Model.LoginModel.InvalidEmailOrPassword)
                        {
                            <div class="col-md-3"></div>
                            <div class="col-md-9">
                                <span class="help-block">Email or password is incorrect</span>
                            </div>
                        }
                        <div class="col-md-3"></div>
                        <div class="col-md-2">
                            <button type="submit" class="btn btn-default">Sign in</button>

                        </div>
                        <div class="col-md-7">
                            <div class="checkbox">
                                <label>
                                    @Html.CheckBoxFor(m => m.LoginModel.RememberMe) Remember me
                                </label>
                            </div>

                        </div>

                        @Html.HiddenFor(m => m.LoginModel.ReturnUrl)
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <h1>Sign up</h1>
        <hr />
        <div class="row">
            <div class="col-md-12">
                <div class="row">
                    <div class="col-md-12">
                        @using (Html.BeginForm("Create", "Identity"))
                        {
                            @Html.AntiForgeryToken()
                            <div class="form-horizontal">
                                @if (!ViewData.ModelState.IsValid)
                                {
                                    <div class="alert alert-danger" role="alert">
                                        @Html.ValidationSummary()
                                    </div>
                                }
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.Email).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.CreateIdentityModel.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.FirstName).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.FirstName, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.CreateIdentityModel.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.LastName).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.LastName, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.CreateIdentityModel.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.Password).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.Password, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.PasswordFor(model => model.CreateIdentityModel.Password, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.Password, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.PasswordRepeated).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.PasswordRepeated, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.PasswordFor(model => model.CreateIdentityModel.PasswordRepeated, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.PasswordRepeated, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.PhoneNumber).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.CreateIdentityModel.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group @(Html.ViewData.ModelState.GetFieldValidationState(Html.IdFor(x => x.CreateIdentityModel.InviteCode).ToString().Replace('_', '.')) == ModelValidationState.Invalid ? " has-error" : null )">
                                    @Html.LabelFor(model => model.CreateIdentityModel.InviteCode, htmlAttributes: new { @class = "control-label col-md-3" })
                                    <div class="col-md-9">
                                        @Html.EditorFor(model => model.CreateIdentityModel.InviteCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreateIdentityModel.InviteCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-offset-3 col-md-9">
                                        <input type="submit" value="Create" class="btn btn-default" />
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
